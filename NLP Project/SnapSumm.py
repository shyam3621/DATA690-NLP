import streamlit as st
import httpcore
setattr(httpcore, 'SyncHTTPTransport', 'AsyncHTTPProxy')
from nltk.tokenize import sent_tokenize
from sklearn.feature_extraction.text import TfidfVectorizer
import networkx as nx
from sumy.parsers.plaintext import PlaintextParser
from sumy.nlp.tokenizers import Tokenizer
from sumy.summarizers.luhn import LuhnSummarizer
from sumy.summarizers.lsa import LsaSummarizer
from sumy.summarizers.lex_rank import LexRankSummarizer
from nltk.translate.bleu_score import sentence_bleu
import fitz  # PyMuPDF
from transformers import T5ForConditionalGeneration, T5Tokenizer, BartForConditionalGeneration, BartTokenizer, GPT2LMHeadModel, GPT2Tokenizer
import matplotlib.pyplot as plt
import time
from gtts import gTTS
from io import BytesIO
from streamlit_option_menu import option_menu
from streamlit_lottie import st_lottie
import requests
from googletrans import Translator
import requests
from bs4 import BeautifulSoup
import nltk
from nltk.tokenize import word_tokenize, sent_tokenize
from nltk.corpus import stopwords
from string import punctuation
from collections import Counter
from simplet5 import SimpleT5
from openai import OpenAI
import streamlit as st
import re
import textstat
import base64
from transformers import BertModel, BertTokenizer
import torch
from scipy.spatial.distance import cosine
import contextlib
from st_aggrid import AgGrid, GridOptionsBuilder
import pandas as pd
from streamlit_carousel import carousel


st.set_page_config(layout="wide")

@contextlib.contextmanager
def lottie_loader(animation, message='Loading...', height=300, key=None):
    with st.empty():
        col1, col2, col3 = st.columns([1,2,1])
        with col2:
            st_lottie(animation, height=height, key=key)
            st.markdown(f'<p style="text-align: center;">{message}</p>', unsafe_allow_html=True)
        yield


# Download NLTK resources
nltk.download('punkt')
nltk.download('stopwords')


@st.cache_data 
def get_img_as_base64(file):
    with open(file, "rb") as f:
        data = f.read()
    return base64.b64encode(data).decode()


img = get_img_as_base64("image.jpg")

img1 = get_img_as_base64("bg.jpg")




def add_footer():
    footer_html = """
    <style>
    .footer {
        position: relative;
        top : 200px;
        left: 0;
        bottom: 0;
        width: 100%;
        background-color: #333;
        color: white;
        text-align: center;
        padding: 10px;
        font-size: 16px;
        font-family: 'fantasy';
        box-shadow: 0px -2px 5px 0px rgba(0,0,0,0.3);
    }
    .footer a {
        color: #f8f9fa;
        text-decoration: none;
    }
    .footer a:hover {
        color: #fff;
        text-decoration: underline;
    }
    .social-icons {
        display: inline-block;
    }
    .social-icons img {
        width: 24px;
        margin: 0 5px;
        vertical-align: middle;
    }
    /* Ensuring that the content does not hide under the footer */
    body, .stApp {
        padding-bottom: 50px; /* Adjust this value based on the height of your footer */
    }
    </style>
    <div class='footer'>
        <p>Transforming text into treasures. Discover clarity with @2024, SNAP SUMM. LLC.</p>
        <p>
            <a href="mailto:snapsummteam@example.com">Contact Us</a> | 
            <a href="javascript:void(0);" onclick="alert('Thank you for your feedback!');">Feedback</a>
        </p>
        <div class="social-icons">
            <a href="https://twitter.com/yourtwitter" target="_blank"><img src="https://simpleicons.org/icons/twitter.svg" alt="Twitter"/></a>
            <a href="https://facebook.com/yourfacebook" target="_blank"><img src="https://simpleicons.org/icons/facebook.svg" alt="Facebook"/></a>
            <a href="https://linkedin.com/in/yourlinkedin" target="_blank"><img src="https://simpleicons.org/icons/linkedin.svg" alt="LinkedIn"/></a>
        </div>
    </div>
    """
    st.markdown(footer_html, unsafe_allow_html=True)


def clean_summary_text(summary):
    """
    Cleans and refines the summary text generated by the summarization model.
    """

    # Normalize whitespace: replace multiple spaces with one, strip leading/trailing spaces
    summary = re.sub(r'\s+', ' ', summary).strip()

    # Optional: Remove all forms of inline citations that follow patterns like [1] or [1, 2]
    summary = re.sub(r'\[\d+(,\s*\d+)*\]', '', summary)

    # Optional: Remove any residual special characters or symbols that are not typically needed
    summary = re.sub(r'[^a-zA-Z0-9.,;:\s\'"!?()\-]', '', summary)

    # Handle common grammatical issues or sentence restructuring (advanced, examples not included)
    # This would normally require NLP models or customized rules specific to your observed issues.

    return summary


def handle_summarization_output(original_text, summary_level):
    # Assuming `summarize_with_t5` returns a raw summary text
    raw_summary, execution_time = summarize_with_t5(original_text, summary_level)

    # Clean the summary text
    clean_summary = clean_summary_text(raw_summary)

    # Further processing or display
    return clean_summary, execution_time


def get_embedding(text, model, tokenizer):
    inputs = tokenizer(text, return_tensors="pt", truncation=True, max_length=512)
    outputs = model(**inputs)
    return outputs.last_hidden_state.mean(dim=1).squeeze()

def compute_semantic_similarity(original_text, summary_text):
    # Load tokenizer and model
    tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')
    model = BertModel.from_pretrained('bert-base-uncased')
    
    # Get embeddings
    original_emb = get_embedding(original_text, model, tokenizer)
    summary_emb = get_embedding(summary_text, model, tokenizer)
    
    # Detach and convert to numpy arrays
    original_emb = original_emb.detach().numpy()
    summary_emb = summary_emb.detach().numpy()
    
    # Compute cosine similarity
    similarity = 1 - cosine(original_emb, summary_emb)
    return similarity



def split_into_paragraphs(text, max_paragraph_length):
    # Split the text into sentences
    sentences = re.split(r'(?<!\w\.\w.)(?<![A-Z][a-z]\.)(?<=\.|\?)\s', text)

    # Initialize variables
    paragraphs = []
    current_paragraph = ""
    current_length = 0

    # Iterate through sentences
    for sentence in sentences:
        # Add sentence to current paragraph if it doesn't exceed max length
        if current_length + len(sentence) <= max_paragraph_length:
            current_paragraph += sentence
            current_length += len(sentence)
        else:
            # If adding the sentence exceeds max length, start a new paragraph
            paragraphs.append(current_paragraph.strip())
            current_paragraph = sentence
            current_length = len(sentence)

    # Add the last paragraph
    if current_paragraph:
        paragraphs.append(current_paragraph.strip())

    return paragraphs


def preprocess_and_analyze_text(input_text):
    # Tokenization
    words = word_tokenize(input_text)
    sentences = sent_tokenize(input_text)

    # Removing stopwords and punctuation
    stop_words = set(stopwords.words('english'))
    filtered_words = [word.lower() for word in words if word.lower() not in stop_words and word.lower() not in punctuation]

    # Calculating word frequency
    word_freq = Counter(filtered_words)

    # Calculating sentence count and average sentence length
    num_sentences = len(sentences)
    total_words = len(filtered_words)
    avg_sentence_length = total_words / num_sentences if num_sentences > 0 else 0

    # Finding most common words
    most_common_words = word_freq.most_common(5)

    # Checking for meaningful content
    meaningful_content = True if total_words > 0 and num_sentences > 0 else False

    # Constructing analysis results
    analysis_results = {
        'Total Sentences': num_sentences,
        'Total Words': total_words,
        'Average Sentence Length': avg_sentence_length,
        'Most Common Words': most_common_words,
        'Meaningful Content': meaningful_content
    }

    return analysis_results



def fetch_text_from_url(url):
    try:
        # Send a GET request to the URL
        response = requests.get(url)

        # Check if the request was successful (status code 200)
        if response.status_code == 200:
            # Parse the HTML content of the page
            soup = BeautifulSoup(response.content, 'html.parser')

            # Extract text content from specific HTML tags (you can customize this based on your requirements)
            text_content = []
            for tag in soup.find_all(['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'li']):
                text_content.append(tag.get_text().strip())

            # Combine the text content into a single string
            text = '\n'.join(text_content)

            # Return the extracted text
            return text
        else:
            # If the request was not successful, print an error message
            st.error(f"Failed to fetch content from URL. Status code: {response.status_code}")
            return None
    except Exception as e:
        # Handle any exceptions that may occur during the process
        st.error(f"Error fetching content from URL: {e}")
        return None


# Function to extract text from PDF
def extract_text_from_pdf(uploaded_file):
    pdf_document = fitz.open(stream=uploaded_file.read(), filetype="pdf")
    pdf_text = ""

    for page_number in range(pdf_document.page_count):
        page = pdf_document[page_number]
        pdf_text += page.get_text()

    return pdf_text



def summarize_with_t5(original_text, summary_level):
    try:
        start_time = time.time()
        model_path = "model1"

        # Load the SimpleT5 model
        model = SimpleT5()
        model.from_pretrained(model_type="t5", model_name="t5-base")
        model.load_model("t5", model_path, use_gpu=False)
        
        # Define chunk percentage based on summary level
        if summary_level == "Detailed":
            chunk_percentage = 10
        elif summary_level == "Moderate":
            chunk_percentage = 20
        elif summary_level == "Brief":
            chunk_percentage = 50
        else:
            chunk_percentage = 10  # Default to 10% if summary level is not recognized

        # Calculate the total length of the input text
        total_length = len(original_text)

        # Calculate the length of each chunk based on the percentage
        chunk_length = int((chunk_percentage / 100) * total_length)

        # Split the original text into chunks
        chunks = [original_text[i:i+chunk_length] for i in range(0, total_length, chunk_length)]
        
        # Summarize each chunk individually
        summaries = []
        for chunk in chunks:
            summary = model.predict(chunk, max_length=3000, num_beams=4)  # Adjust max_length as needed
            # Ensure summary is a string
            if isinstance(summary, list):
                summary = " ".join(summary)
            summaries.append(summary)
        
        # Combine the summaries from all chunks
        combined_summary = " ".join(summaries)
        
        end_time = time.time()
        execution_time = end_time - start_time
        st.write("")
        # st.write(execution_time)
        return combined_summary, execution_time
    except Exception as e:
        st.error(f"Error summarizing text: {e}")
        return None, None



# Function to convert Text to Speech {Additional Feature}
def text_to_speech(text):
    tts = gTTS(text, lang='en')
    audio_bytes_io = BytesIO()
    tts.write_to_fp(audio_bytes_io)
    return audio_bytes_io.getvalue()


# Function for Animation
def load_lottieurl(url):
    r = requests.get(url)
    if r.status_code != 200:
        return None
    return r.json()

lottie_coding = load_lottieurl("https://lottie.host/179515ac-7770-47f0-bc62-ce832c9530bb/V9ibCqKdc0.json")
lottie_coding3 = load_lottieurl("https://lottie.host/f0ff3b31-bedc-4516-8289-ab85afba2c9c/DeyRLGCEqc.json")
lottie_coding4 = load_lottieurl("https://lottie.host/e7b9bb82-a4c2-4bca-802a-98c1d022d61b/vzWdlMzVTD.json")
lottie_coding1 = load_lottieurl("https://lottie.host/e52c321b-2fff-4d2d-9da6-509f6e8a5f52/vnRUnbSOEW.json")
lottie_coding2 = load_lottieurl("https://lottie.host/5680d03c-6e12-4c7f-bbce-b6ed09141119/J9H0HMn1y1.json")


translator = Translator()


def styled_write(text, font_size=18, text_color="white", background_color="black"):
    styled_text = (
        f"<div style='font-size: {font_size}px; color: {text_color}; "
        f"background-color: {background_color}; padding: 10px;'>{text}</div>"
    )
    st.write(styled_text, unsafe_allow_html=True)


# Streamlit app starts from here
def main():

    
    with st.sidebar:
        selected = option_menu(
            menu_title = "Menu",
            options = ["Home","Summarize", "Speech", "Translate", "Help"],
            icons = ["house","book","mic","translate","info-circle"],
            default_index = 0,
            )

    page_bg_img = f"""
            <style>
            [data-testid="stAppViewContainer"] > .main {{
            background-size: 155%;
            background-position: top left;
            background-repeat: repeat;
            background-attachment: local;
            }}

            [data-testid="stSidebar"] > div:first-child {{
            background-image: url("data:image/png;base64,{img}");
            background-position: center; 
            background-repeat: no-repeat;
            background-attachment: fixed;
            }}

            [data-testid="stBottomBlockContainer"] {{
            background: rgba(0,0,0,0);
            }}

            [data-testid="stHeader"] {{
            background: rgba(0,0,0,0);
            }}

            [data-testid="stToolbar"] {{
            right: 2rem;
            }}
            </style>
        """

    st.markdown(page_bg_img, unsafe_allow_html=True)



    # HOME PAGE CODE for Streamlit app
    if selected == "Home":

        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            title = "SNAP SUMM"
            style = f"<p style='font-family: Stencil Std, fantasy; font-weight:900; font-size: 53px; text-align: center; background-color: rgb(255 0 0 / 68%);border-radius: 60px 30px;'>{title}</p>"
            st.markdown(style, unsafe_allow_html=True)
            tagline= "Summarize, Speak, Translate - Effortlessly"
            styletag = f"<p style='font-family: Stencil Std, fantasy; font-size: 20px; text-align: center; text-decoration:underline;'>{tagline}</p>"
            st.markdown(styletag, unsafe_allow_html=True)
                
        carousel_html = """
        <html>
        <head>
            <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
            <style>
                .carousel-caption {
                    position: absolute;
                    right: 0;
                    bottom: 0;
                    left: 0;
                    padding: 10px;
                    background: rgba(0, 0, 0, 0.6); /* Semi-transparent black background */
                    color: white; /* White text for visibility */
                    margin-bottom: 20px;
                    font-family: fantasy;
                    text-align: center;
                }
                .carousel-caption p{
                    background-color : seagreen;
                    font-weight : lighter;
                }
                .carousel-caption h5{
                    font-weight : bolder;
                }
                .carousel-item {
                    position: relative;
                    height: 600px; /* Fixed height or adjust as necessary */
                }
                .carousel-item img {
                    position: absolute;
                    top: -60px;
                    left: 0;
                    min-width: 100%;
                    
                }
            </style>
            <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
            <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
        </head>
        <body>
            <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
                <ol class="carousel-indicators">
                    <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"></li>
                    <li data-target="#carouselExampleIndicators" data-slide-to="1"></li>
                    <li data-target="#carouselExampleIndicators" data-slide-to="2"></li>
                </ol>
                <div class="carousel-inner">
                    <div class="carousel-item active" data-interval="3000">
                        <img class="d-block w-100" src="https://static.vecteezy.com/system/resources/previews/008/290/609/non_2x/summarize-writing-design-on-white-background-free-vector.jpg" alt="First slide">
                        <div class="carousel-caption">
                            <h5>Effortless Summarization</h5>
                            <p>Unlock the power of brevity. Experience advanced text summarization that distills essential information from extensive documents instantly.</p>
                        </div>
                    </div>
                    <div class="carousel-item" data-interval="3000">
                        <img class="d-block w-100" src="https://static-blog.onlyoffice.com/wp-content/uploads/2023/08/14123647/ONLYOFFICE-10-text-to-speech-tools-to-consider-in-2023.png" alt="Second slide">
                        <div class="carousel-caption">
                            <h5>Voice Your Text</h5>
                            <p>Transform written content into natural-sounding audio. Bring your texts to life with our intuitive Text-to-Speech technology.</p>
                        </div>
                    </div>
                    <div class="carousel-item" data-interval="3000">
                        <img class="d-block w-100" src="https://miro.medium.com/v2/resize:fit:1400/0*KGcqYRXgidCzctW_.jpg" alt="Third slide">
                        <div class="carousel-caption">
                            <h5>Bridge Language Barriers</h5>
                            <p>Communicate globally without constraints. Our translation tools support multiple languages, ensuring your message is heard around the world.</p>
                        </div>
                    </div>
                </div>
                <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="sr-only">Previous</span>
                </a>
                <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="sr-only">Next</span>
                </a>
            </div>
        </body>
        </html>
        """

        # Embed the HTML directly into the Streamlit page
        st.components.v1.html(carousel_html, height=600)

        col4,col5 = st.columns([1,1])
        with col4:
            st_lottie(lottie_coding, height = 415, key= "coding")

            styled_sentence = f"<p style='font-family: cursive; font-size: 25px; text-align: center;'>Distill the essence of information</p>"
            st.markdown(styled_sentence, unsafe_allow_html=True)

        with col5:
            st_lottie(lottie_coding4, height = 415, key= "coding2")
            styled_sentence = f"<p style='font-family: cursive; font-size: 25px; text-align: center;'>Navigate the sea of words effortlessly</p>"
            st.markdown(styled_sentence, unsafe_allow_html=True)

        st_lottie(lottie_coding3, height = 415, key= "coding3")
        styled_sentence = f"<p style='font-family: cursive; font-size: 25px; text-align: center;'>Embrace the clarity of concise insights</p>"
        st.markdown(styled_sentence, unsafe_allow_html=True)
                

        add_footer()
 


    # Summarize Page code for Streamlit app
    if selected == "Summarize":
        
        
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            title = "SNAP SUMM"
            style = f"<p style='font-family: Stencil Std, fantasy; font-weight:900; font-size: 53px; text-align: center; background-color: rgb(255 0 0 / 68%);border-radius: 60px 30px;'>{title}</p>"
            st.markdown(style, unsafe_allow_html=True)


        st.text("")
        st.text("")

 
        # Input choice for Text or PDF file
        input_choice = st.radio("Choose your input format:", ("Text", "PDF File","URL"))
        
        style1 = """
            <style>
                /* Targeting the label 'Choose your input format:' */
                div.st-emotion-cache-l9bjmx p {
                font-size: 22px;
                font-family: Stencil Std, fantasy;
                }
            </style>
        """

        st.markdown(style1, unsafe_allow_html=True)

        original_text=""
        url=""
        # Input text
        if input_choice == "Text":
            original_text = st.text_area("Enter the original text:")
        elif input_choice == "PDF File":
            uploaded_file = st.file_uploader("Upload a PDF file", type=["pdf"])
            if uploaded_file:
                original_text = extract_text_from_pdf(uploaded_file)
        elif input_choice == "URL":
            url = st.text_input("Enter the URL of the webpage:")


        # Dropdown select box for summary level
        summary_level = st.selectbox("Select the level of summary:", ("Brief", "Moderate", "Detailed"))

        result = False

        result = st.button("Generate Summary")
        
        style5 = """
            <style>
                /* Targeting all buttons inside Streamlit's button container */
                div.stButton > button {
                    font-size: 22px;
                    font-family: 'Stencil Std', fantasy; /* Ensure 'Stencil Std' is available */
                    color: black; /* Text color */
                    background-color: white; /* Background color */
                    border-radius: 40px; /* Rounded corners */
                    border: none; /* No borders */
                    padding: 10px 20px; /* Top and bottom padding, Left and right padding */
                    margin-left : 38%;
                }
            </style>
        """

        st.markdown(style5, unsafe_allow_html=True)

        # Execution of Summaries
        if result:

            if url != "":
                # Display loading spinner while fetching text
                with st.spinner("Fetching text from URL..."):
                    # Fetch text from the URL
                    fetched_text = fetch_text_from_url(url)
                    if fetched_text:
                        original_text = fetched_text
                        st.success("Text fetched from URL.")
                        url=""


            # Display loading spinner while processing
            with lottie_loader(lottie_coding2, message="Kindly hold on; this process typically wraps up within two minutes!!"):
                
                clean_summary, t5_time = handle_summarization_output(original_text, summary_level)
                semantic_similarity = compute_semantic_similarity(original_text, clean_summary)
                    
                # t5_summary, t5_time = summarize_with_t5(original_text,summary_level)
                
                MAX_PARAGRAPH_LENGTH = 1500                

                paragraphs = split_into_paragraphs(clean_summary, MAX_PARAGRAPH_LENGTH)

                markdown_text = "<br><br>".join(paragraphs)


            style = f"<p style='font-family: Stencil Std, fantasy; font-weight: 900;font-size: 38px;text-align: center;background-color: azure;border-radius: 70px;padding-top: 20px;padding-bottom: 20px;margin-top: 100px;'>T5 {summary_level} Level Summary</p>"
            st.markdown(style, unsafe_allow_html=True)


            st.markdown(
                f'<div style="background-color: rgb(51, 51, 51);color: rgb(255, 255, 255);padding: 10px;border-radius: 5px;font-family: fantasy;word-spacing: 5px;">{markdown_text}</div>',
                unsafe_allow_html=True
               )




            style = f"<p style ='font-family: Stencil Std, fantasy; font-weight: 900;font-size: 38px;text-align: center;background-color: azure;border-radius: 70px;padding-top: 20px;padding-bottom: 20px;margin-top: 100px;'>Semantic Similarity Metric</p>"
            st.markdown(style, unsafe_allow_html=True)


            style = f"<p style='font-family: Stencil Std, fantasy;font-weight: 900;font-size: 25px;text-align: center;padding-top: 20px;background-color: greenyellow;margin-top: 5px;border-radius: 10px;padding-bottom: 20px;'>The summary has a semantic similarity score of ' <b><u>{semantic_similarity:.2f} </u></b>' compared to the original text.</p>"
            st.markdown(style, unsafe_allow_html=True)
        


        add_footer()

    # Speech code for Streamlit
    elif selected == "Speech":
       
        
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            title = "SPEECH"
            style = f"<p style='font-family: Stencil Std, fantasy; font-weight:900; font-size: 53px; text-align: center; background-color: rgb(255 0 0 / 68%);border-radius: 60px 30px;'>{title}</p>"
            st.markdown(style, unsafe_allow_html=True)


        input_text = st.text_area("Enter the text")

        style6 = """
            <style>
                /* Targeting the label 'Choose your input format:' */
                div.st-emotion-cache-l9bjmx p {
                font-size: 22px;
                font-family: Stencil Std, fantasy;
                }
            </style>
        """

        st.markdown(style6, unsafe_allow_html=True)


        stylebutton = """
            <style>
                /* Targeting all buttons inside Streamlit's button container */
                div.stButton > button {
                    font-size: 22px;
                    font-family: 'Stencil Std', fantasy; /* Ensure 'Stencil Std' is available */
                    color: black; /* Text color */
                    background-color: white; /* Background color */
                    border-radius: 40px; /* Rounded corners */
                    
                    padding: 10px 20px; /* Top and bottom padding, Left and right padding */
                    margin-left : 45%;
                }
            </style>
        """

        st.markdown(stylebutton, unsafe_allow_html=True)

        if st.button("Listen"):
            audio_data = text_to_speech(input_text)
            st.audio(audio_data, format="audio/mp3")

        col1, col2, col3 = st.columns([1, 1, 1])
        with col2:
            st_lottie("https://lottie.host/b8c5e866-f66f-4299-9f10-79e336f90f19/kRiiFvqa29.json", width =400 ,key= "coding3")


        add_footer()


    #Translate code for Streamlit 
    elif selected == "Translate":

        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            title = "TRANSLATE"
            style = f"<p style='font-family: Stencil Std, fantasy; font-weight:900; font-size: 53px; text-align: center; background-color: rgb(255 0 0 / 68%);border-radius: 60px 30px;'>{title}</p>"
            st.markdown(style, unsafe_allow_html=True)


        input_text_translate = st.text_area("Enter the text for translation")

        style7 = """
            <style>
                /* Targeting the label 'Choose your input format:' */
                div.st-emotion-cache-l9bjmx p {
                font-size: 22px;
                font-family: Stencil Std, fantasy;
                }
            </style>
        """

        st.markdown(style7, unsafe_allow_html=True)

        language_options = {
            "Select Language": "",
            "French": "fr",
            "Spanish": "es",
            "German": "de",
            "Italian": "it",
            "Russian": "ru",
            "Telugu": "te",
            "Chinese (Simplified)": "zh-CN",
            "Chinese (Traditional)": "zh-TW",
            "Arabic": "ar",
            "Hindi": "hi",
            "Bengali": "bn",
            "Portuguese (Brazil)": "pt-BR",
            "Portuguese (Portugal)": "pt-PT",
            "Japanese": "ja",
            "Korean": "ko",
            "Turkish": "tr",
            "Vietnamese": "vi",
            "Indonesian": "id",
            "Polish": "pl",
            "Dutch": "nl",
            "Thai": "th"
        }

        target_language = st.selectbox("Select the target language", list(language_options.keys()))


        stylebutton = """
            <style>
                /* Targeting all buttons inside Streamlit's button container */
                div.stButton > button {
                    font-size: 22px;
                    font-family: 'Stencil Std', fantasy; /* Ensure 'Stencil Std' is available */
                    color: black; /* Text color */
                    background-color: white; /* Background color */
                    border-radius: 40px; /* Rounded corners */
                    
                    padding: 10px 20px; /* Top and bottom padding, Left and right padding */
                    margin-left : 45%;
                }
            </style>
        """

        st.markdown(stylebutton, unsafe_allow_html=True)



        if st.button("Translate"):
            if target_language == "Select Language":
                st.warning("Please select a target language.")
            else:
                target_language_code = language_options[target_language]

                # Translating the input text
                translated_text = translator.translate(input_text_translate, dest=target_language_code).text
                st.header("Translated Text")
                st.markdown(
                    f'<div style="background-color: #333333; color: #ffffff; padding: 10px; border-radius: 5px;">{translated_text}</div>',
                    unsafe_allow_html=True
                )


        col1, col2, col3 = st.columns([1, 1, 1])
        with col2:
            st_lottie("https://lottie.host/97c47da0-ce5e-42b1-b988-bd8d8739f567/5Y1MAEMJBJ.json", width =400 ,key= "coding3")

        add_footer()

    elif selected == "Help":


        background_image_url = ""
        background_style = f"""
            <style>
                .stApp {{
                    background-image: url('{background_image_url}');
                    background-size: cover;
                    back
                }}
            </style>
        """
        st.markdown(background_style, unsafe_allow_html=True)

        col1, col2 = st.columns([5, 1])
        
        with col2:
            st_lottie(lottie_coding1, key="coding", height = 100, width= 100)


        


        
        with col1:

            st.header('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chat Support', divider='rainbow')

        style9 = """
                <style>
                    /* Targeting the label 'Choose your input format:' */
                    div.st-emotion-cache-eqffof.e1nzilvr5 p {
                    font-size: 15px;
                    font-family: Stencil Std, fantasy;
                    }
                </style>
            """

        st.markdown(style9, unsafe_allow_html=True)
            


        client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

        if "openai_model" not in st.session_state:
          st.session_state["openai_model"] = "gpt-3.5-turbo"

        if "messages" not in st.session_state:
          st.session_state.messages = []

        # Check if there are no previous messages
        if not st.session_state.messages:
          # Initial prompt from the assistant
          initial_prompt = "Hello! How can I assist you today?"
          st.session_state.messages.append({"role": "assistant", "content": initial_prompt})


        with open('style.css') as f:
            st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

        for message in st.session_state.messages:
          with st.chat_message(message["role"]):
            st.markdown(message["content"])

        if prompt := st.chat_input("Message SnapSumm...."):
          st.session_state.messages.append({"role": "user", "content": prompt})
          with st.chat_message("user"):
            st.markdown(prompt)

          with st.chat_message("assistant"):
            stream = client.chat.completions.create(
              model=st.session_state["openai_model"],
              messages=[{"role": m["role"], "content": m["content"]} for m in st.session_state.messages],
              stream=True,
            )
            response = st.write_stream(stream)
          st.session_state.messages.append({"role": "assistant", "content": response})



# Calling the main function
if __name__ == "__main__":
    main()
